-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cordic is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    select_r : IN STD_LOGIC;
    CS_I_T : IN STD_LOGIC_VECTOR (15 downto 0);
    IA_I_S : IN STD_LOGIC_VECTOR (15 downto 0);
    IA_I_C : IN STD_LOGIC_VECTOR (15 downto 0);
    CS_O_SIN : OUT STD_LOGIC_VECTOR (15 downto 0);
    CS_O_SIN_ap_vld : OUT STD_LOGIC;
    CS_O_COS : OUT STD_LOGIC_VECTOR (15 downto 0);
    CS_O_COS_ap_vld : OUT STD_LOGIC;
    IA_O_IAT : OUT STD_LOGIC_VECTOR (15 downto 0);
    IA_O_IAT_ap_vld : OUT STD_LOGIC;
    done : OUT STD_LOGIC_VECTOR (15 downto 0);
    done_ap_vld : OUT STD_LOGIC );
end;


architecture behav of cordic is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cordic_cordic,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.573000,HLS_SYN_LAT=51,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=160,HLS_SYN_LUT=567,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_26DE : STD_LOGIC_VECTOR (15 downto 0) := "0010011011011110";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal cordic_phase_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal cordic_phase_V_ce0 : STD_LOGIC;
    signal cordic_phase_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal itr_1_reg_424 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln27_fu_215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_load_1_reg_437 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_V_2_load_1_reg_442 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_2_load_reg_447 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_4_fu_303_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_4_reg_452 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_5_fu_313_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_5_reg_457 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln27_fu_210_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal r_V_fu_72 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_2_fu_356_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_V_fu_163_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal r_V_2_fu_76 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_2_fu_361_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal y_V_fu_171_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_2_fu_80 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_380_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal t_V_fu_179_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal itr_fu_84 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln27_fu_221_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal x_V_fu_163_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_V_fu_171_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_fu_179_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_V_1_fu_232_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_V_1_fu_240_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal t_V_4_fu_248_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_256_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_256_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_272_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sigma_2_fu_288_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal sigma_fu_264_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sigma_1_fu_280_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal sigma_2_fu_288_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal r_V_4_fu_303_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln1319_fu_299_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal r_V_5_fu_313_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln1316_1_fu_327_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln1534_fu_330_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_fu_333_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal sext_ln1316_3_fu_343_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal r_1_fu_346_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal y_shift_V_fu_352_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_shift_V_fu_339_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_380_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal grp_fu_380_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component cordic_mul_2s_16s_18_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (1 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component cordic_mac_mulsub_14ns_2s_16ns_16_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (1 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component cordic_cordic_phase_V_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    cordic_phase_V_U : component cordic_cordic_phase_V_ROM_AUTO_1R
    generic map (
        DataWidth => 14,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => cordic_phase_V_address0,
        ce0 => cordic_phase_V_ce0,
        q0 => cordic_phase_V_q0);

    mul_2s_16s_18_1_1_U1 : component cordic_mul_2s_16s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 16,
        dout_WIDTH => 18)
    port map (
        din0 => r_V_4_fu_303_p0,
        din1 => r_V_fu_72,
        dout => r_V_4_fu_303_p2);

    mul_2s_16s_18_1_1_U2 : component cordic_mul_2s_16s_18_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 2,
        din1_WIDTH => 16,
        dout_WIDTH => 18)
    port map (
        din0 => r_V_5_fu_313_p0,
        din1 => r_V_2_fu_76,
        dout => r_V_5_fu_313_p2);

    mac_mulsub_14ns_2s_16ns_16_4_1_U3 : component cordic_mac_mulsub_14ns_2s_16ns_16_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 14,
        din1_WIDTH => 2,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_380_p0,
        din1 => sigma_2_fu_288_p3,
        din2 => t_V_2_load_reg_447,
        ce => ap_const_logic_1,
        dout => grp_fu_380_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    itr_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                itr_fu_84 <= ap_const_lv4_0;
            elsif (((icmp_ln27_fu_215_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                itr_fu_84 <= add_ln27_fu_221_p2;
            end if; 
        end if;
    end process;

    r_V_2_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_V_2_fu_76 <= y_V_fu_171_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                r_V_2_fu_76 <= y_V_2_fu_361_p2;
            end if; 
        end if;
    end process;

    r_V_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_V_fu_72 <= x_V_fu_163_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                r_V_fu_72 <= x_V_2_fu_356_p2;
            end if; 
        end if;
    end process;

    t_V_2_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_V_2_fu_80 <= t_V_fu_179_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_V_2_fu_80 <= grp_fu_380_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                itr_1_reg_424 <= itr_fu_84;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                r_V_2_load_1_reg_442 <= r_V_2_fu_76;
                r_V_4_reg_452 <= r_V_4_fu_303_p2;
                r_V_5_reg_457 <= r_V_5_fu_313_p2;
                r_V_load_1_reg_437 <= r_V_fu_72;
                t_V_2_load_reg_447 <= t_V_2_fu_80;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln27_fu_215_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln27_fu_215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    CS_O_COS <= 
        ap_const_lv16_0 when (x_V_1_fu_240_p0(0) = '1') else 
        r_V_fu_72;

    CS_O_COS_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln27_fu_215_p2)
    begin
        if (((icmp_ln27_fu_215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            CS_O_COS_ap_vld <= ap_const_logic_1;
        else 
            CS_O_COS_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    CS_O_SIN <= 
        ap_const_lv16_0 when (y_V_1_fu_232_p0(0) = '1') else 
        r_V_2_fu_76;

    CS_O_SIN_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln27_fu_215_p2)
    begin
        if (((icmp_ln27_fu_215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            CS_O_SIN_ap_vld <= ap_const_logic_1;
        else 
            CS_O_SIN_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    IA_O_IAT <= 
        t_V_2_fu_80 when (t_V_4_fu_248_p0(0) = '1') else 
        ap_const_lv16_0;

    IA_O_IAT_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln27_fu_215_p2)
    begin
        if (((icmp_ln27_fu_215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            IA_O_IAT_ap_vld <= ap_const_logic_1;
        else 
            IA_O_IAT_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    add_ln27_fu_221_p2 <= std_logic_vector(unsigned(itr_fu_84) + unsigned(ap_const_lv4_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln27_fu_215_p2)
    begin
        if (((icmp_ln27_fu_215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln27_fu_215_p2)
    begin
        if (((icmp_ln27_fu_215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    cordic_phase_V_address0 <= zext_ln27_fu_210_p1(6 - 1 downto 0);

    cordic_phase_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            cordic_phase_V_ce0 <= ap_const_logic_1;
        else 
            cordic_phase_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    done <= ap_const_lv16_1;

    done_ap_vld_assign_proc : process(ap_CS_fsm_state2, icmp_ln27_fu_215_p2)
    begin
        if (((icmp_ln27_fu_215_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            done_ap_vld <= ap_const_logic_1;
        else 
            done_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_380_p0 <= grp_fu_380_p00(14 - 1 downto 0);
    grp_fu_380_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(cordic_phase_V_q0),16));
    icmp_ln27_fu_215_p2 <= "1" when (itr_fu_84 = ap_const_lv4_A) else "0";
    r_1_fu_346_p2 <= std_logic_vector(shift_right(signed(sext_ln1316_3_fu_343_p1),to_integer(unsigned('0' & zext_ln1534_fu_330_p1(31-1 downto 0)))));
    r_V_4_fu_303_p0 <= sext_ln1319_fu_299_p1(2 - 1 downto 0);
    r_V_5_fu_313_p0 <= sext_ln1319_fu_299_p1(2 - 1 downto 0);
    r_fu_333_p2 <= std_logic_vector(shift_right(signed(sext_ln1316_1_fu_327_p1),to_integer(unsigned('0' & zext_ln1534_fu_330_p1(31-1 downto 0)))));
        sext_ln1316_1_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_4_reg_452),48));

        sext_ln1316_3_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_5_reg_457),48));

        sext_ln1319_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sigma_2_fu_288_p3),18));

    sigma_1_fu_280_p3 <= 
        ap_const_lv2_3 when (tmp_1_fu_272_p3(0) = '1') else 
        ap_const_lv2_1;
    sigma_2_fu_288_p0 <= (0=>select_r, others=>'-');
    sigma_2_fu_288_p3 <= 
        sigma_fu_264_p3 when (sigma_2_fu_288_p0(0) = '1') else 
        sigma_1_fu_280_p3;
    sigma_fu_264_p3 <= 
        ap_const_lv2_1 when (tmp_fu_256_p3(0) = '1') else 
        ap_const_lv2_3;
    t_V_4_fu_248_p0 <= (0=>select_r, others=>'-');
    t_V_fu_179_p0 <= (0=>select_r, others=>'-');
    t_V_fu_179_p3 <= 
        ap_const_lv16_0 when (t_V_fu_179_p0(0) = '1') else 
        CS_I_T;
    tmp_1_fu_272_p3 <= t_V_2_fu_80(15 downto 15);
    tmp_fu_256_p1 <= r_V_2_fu_76;
    tmp_fu_256_p3 <= tmp_fu_256_p1(15 downto 15);
    x_V_1_fu_240_p0 <= (0=>select_r, others=>'-');
    x_V_2_fu_356_p2 <= std_logic_vector(signed(r_V_load_1_reg_437) - signed(y_shift_V_fu_352_p1));
    x_V_fu_163_p0 <= (0=>select_r, others=>'-');
    x_V_fu_163_p3 <= 
        IA_I_C when (x_V_fu_163_p0(0) = '1') else 
        ap_const_lv16_26DE;
    x_shift_V_fu_339_p1 <= r_fu_333_p2(16 - 1 downto 0);
    y_V_1_fu_232_p0 <= (0=>select_r, others=>'-');
    y_V_2_fu_361_p2 <= std_logic_vector(unsigned(x_shift_V_fu_339_p1) + unsigned(r_V_2_load_1_reg_442));
    y_V_fu_171_p0 <= (0=>select_r, others=>'-');
    y_V_fu_171_p3 <= 
        IA_I_S when (y_V_fu_171_p0(0) = '1') else 
        ap_const_lv16_0;
    y_shift_V_fu_352_p1 <= r_1_fu_346_p2(16 - 1 downto 0);
    zext_ln1534_fu_330_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(itr_1_reg_424),48));
    zext_ln27_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(itr_fu_84),64));
end behav;
